volumes:
  grafana_data: {}
  alertmanager-data: {}
    #external: true
networks:
  #my-overlay-network:
    #driver: overlay
      # attachable: true
  my-overlay-network:
    external: true
      #name: my-overlay-network
configs:
  promtail_config:
    external: true
  loki_config:
    external: true
  blackbox_config:
    external: true
services:
  loki:
    image: grafana/loki:3.0.0
    networks:
      - my-overlay-network
    configs:
      - source: loki_config
        target: /etc/loki/loki-local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
  promtail:
    image: grafana/promtail:main-86b119a
    deploy:
      mode: global
    networks:
      - my-overlay-network
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail.yaml
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yaml
  grafana:
    image: grafana/grafana:11.0.0
    ports:
      - "3000:3000"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - my-overlay-network
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana_data:/var/lib/grafana
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.25.0
    command: '--config.file=/etc/prometheus/blackbox.yml'
    hostname: '{{.Node.ID}}'
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    configs:
      - source: blackbox_config
        target: /etc/prometheus/blackbox.yml
    networks:
      - my-overlay-network
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    networks:
      - my-overlay-network
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M 
  node-exporter:
    image: prom/node-exporter:v1.8.1
    networks:
      - my-overlay-network
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
  prometheus:
    image: prom/prometheus:v2.52.0
    ports:
      - "9090:9090"
    networks:
      - my-overlay-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ../configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../configs/prometheus/rules.yml:/etc/prometheus/rules.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == node1
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 128M
  alertmanager:
    image:  prom/alertmanager:v0.27.0
    networks:
      my-overlay-network:
        aliases:
          - alertmanager
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    volumes:
      - ../configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
        #   - alertmanager-data:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
